name: 'SOL RPC'

on:
  pull_request:
  merge_group:
  push:
    branches:
      - main
    tags:
      - v*
    paths-ignore:
      - "README.md"
env:
  CARGO_TERM_COLOR: always
  SOLANA_CLI_VERSION: "2.1.15"
  RUSTFLAGS: "-Dwarnings"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      - name: 'Check code'
        run: |
          cargo fmt --all -- --check
          cargo clippy --locked --verbose --tests --benches --workspace -- -D clippy::all
          cargo clippy --locked --verbose --target wasm32-unknown-unknown -p sol_rpc_canister -- -D clippy::all

  cargo-doc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cargo doc
        run: |
          cargo doc --workspace --no-deps
        env:
          RUSTDOCFLAGS: "--deny warnings"

  reproducible-build:
    runs-on: ubuntu-22.04
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      - name: Docker build
        run: |
          ./scripts/docker-build

      - name: 'Archive Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: sol_rpc_canister.wasm.gz
          path: ./wasms/sol_rpc_canister.wasm.gz
          if-no-files-found: error
          compression-level: 0

      - name: 'Add summary'
        run: |
          hash=`sha256sum ./wasms/sol_rpc_canister.wasm.gz`
          echo "SHA-256 :hash: ${hash}" >> $GITHUB_STEP_SUMMARY

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      - name: 'Run unit tests'
        run: cargo test --locked --workspace --exclude basic_solana --exclude sol_rpc_int_tests

  integration-tests:
    needs: [ reproducible-build ]
    runs-on: ubuntu-22.04
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Download Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: sol_rpc_canister.wasm.gz

      - name: 'Set SOL_RPC_CANISTER_WASM_PATH for load_wasm'
        run: |
          echo "SOL_RPC_CANISTER_WASM_PATH=$GITHUB_WORKSPACE/sol_rpc_canister.wasm.gz" >> "$GITHUB_ENV"

      - name: 'Install PocketIC server'
        uses: dfinity/pocketic@main
        with:
          pocket-ic-server-version: "8.0.0"

      - name: 'Install Solana CLI'
        run: |
          sh -c "$(curl -sSfL https://release.anza.xyz/v${SOLANA_CLI_VERSION}/install)"
          echo "/home/runner/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        shell: bash

      - name: 'Start Solana test validator'
        run: |
          solana-test-validator &

      - name: 'Download wallet canister'
        run: |
          wget https://github.com/dfinity/sdk/raw/0a82e042adec6f24ba53665312713923bf276a34/src/distributed/wallet.wasm.gz

      - name: 'Set WALLET_WASM_PATH for load_wasm'
        run: |
          echo "WALLET_WASM_PATH=$GITHUB_WORKSPACE/wallet.wasm.gz" >> "$GITHUB_ENV"

      - name: 'Set BASIC_SOLANA_WASM_PATH for load_wasm'
        run: |
          echo "BASIC_SOLANA_WASM_PATH=$GITHUB_WORKSPACE/target/wasm32-unknown-unknown/canister-release/basic_solana.wasm" >> "$GITHUB_ENV"

      - name: 'Test basic_solana'
        run: |
          cargo build --manifest-path examples/basic_solana/Cargo.toml --target wasm32-unknown-unknown --no-default-features --profile canister-release 
          cargo test --locked --package basic_solana


      - name: 'Test sol_rpc_int_tests'
        run: cargo test --locked --package sol_rpc_int_tests -- --test-threads 2 --nocapture

  end-to-end-tests:
    needs: [ reproducible-build ]
    runs-on: ubuntu-22.04
    concurrency:
      group: ci_environment
      cancel-in-progress: true
    env:
      sol_rpc_canister_id: zaylz-mqaaa-aaaar-qaqzq-cai
      wallet_canister_id: zo2gr-xaaaa-aaaar-qaqyq-cai
      # Needed to surpass dfx error to use the insecure plaintext identity
      DFX_WARNING: -mainnet_plaintext_identity
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Download Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: sol_rpc_canister.wasm.gz

      - name: 'Install dfx'
        uses: dfinity/setup-dfx@e50c04f104ee4285ec010f10609483cf41e4d365
        with:
          dfx-version: "0.25.0"

      - name: 'Confirm dfx successful installation'
        run: dfx --version

      - name: "Import dfx deploy key"
        env:
          DFX_DEPLOY_KEY: ${{ secrets.DFX_DEPLOY_KEY }}
        run: |
          key_pem=$(mktemp)
          printenv "DFX_DEPLOY_KEY" > "$key_pem"
          dfx identity import --storage-mode plaintext ci "$key_pem"
          rm "$key_pem"
          dfx identity use ci
          dfx identity get-principal
          dfx identity set-wallet --ic --force "${{ env.wallet_canister_id }}"
          dfx wallet balance --ic

      - name: "Deploy SOL RPC Canister"
        run: |
          wallet="${{ env.wallet_canister_id }}"
          dfx canister --network ic --wallet "$wallet" install --mode upgrade \
          --wasm "$GITHUB_WORKSPACE/sol_rpc_canister.wasm.gz" \
          "${{ env.sol_rpc_canister_id }}"          

      - name: "Run examples"
        working-directory: canister/ci
        run: ../scripts/examples.sh 2>&1 | tee e2e_examples.log

      - name: "Detect Inconsistent Results"
        working-directory: canister/ci
        run: cat e2e_examples.log | grep -q -e Inconsistent && exit 1 || exit 0
