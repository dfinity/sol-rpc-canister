type InitArg = record {
    // The canister will interact with this Solana network.
    // If not specified, the value is set to `Devnet`.
    solana_network : opt SolanaNetwork;
    // Commitment level to use when interacting with the Solana blockchain.
    // If not specified, the value is set to `finalized`.
    solana_commitment_level : opt CommitmentLevel;
    // EdDSA keys will be derived from this key.
    // If not specified, the value is set to `TestKeyLocalDevelopment`.
    ed25519_key_name : opt Ed25519KeyName;
    // The canister will interact with this SOL RPC canister.
    // If not specified, the value is set to `tghme-zyaaa-aaaar-qarca-cai`.
    sol_rpc_canister_id : opt principal;
};

type SolanaNetwork = variant {
    // Live production environment.
    Mainnet;
    // Public testing and development.
    Devnet;
    // Validator and stress testing.
    Testnet;
};

// Commitment levels in Solana, representing finality guarantees of transactions and state queries.
// See https://solana.com/de/docs/rpc#configuring-state-commitment.
type CommitmentLevel = variant {
  processed;
  confirmed;
  finalized;
};

type Ed25519KeyName = variant {
    // For local development with `dfx`.
    LocalDevelopment;
    // For testing with the Internet Computer's test key.
    MainnetTestKey1;
    // For running the canister in a production environment using the Internet Computer's production key.
    MainnetProdKey1;
};

// Atomic unit of SOL, i.e., 1 SOL = 10^9 Lamports
type Lamport = nat;

// Address on Solana i.e. a base58-encoded Ed25519 public key or Program Derived Address (PDA).
type Address = text;

// A transaction ID on Solana, i.e. the first signature in a transaction.
type Txid = text;

// Hash value used as recent_blockhash field in Transactions.
type Blockhash = text;

// A human-readable representation of a token amount, as returned by the Solana `getTokenAccountBalance` RPC method.
type TokenAmount = record {
  // The raw balance without decimals, a string representation of a nat64.
  amount : text;
  // Number of base 10 digits to the right of the decimal place.
  decimals : nat8;
  // DEPRECATED: The balance, using mint-prescribed decimals.
  uiAmount : opt float64;
  // The balance as a string, using mint-prescribed decimals.
  uiAmountString : text;
};

service : (InitArg) -> {
    // Returns the Solana address derived from a principal.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the address from.
    //
    // Behavior:
    // - If `owner` is omitted, the address is derived from the caller's principal.
    solana_account : (owner: opt principal) -> (Address);

    // Returns the address of a Solana nonce account derived from a principal.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the nonce account address from.
    //
    // Behavior:
    // - If `owner` is omitted, the nonce account address is derived from the caller's principal.
    nonce_account : (owner: opt principal) -> (Address);

    // Returns the address of the SPL associated token account (ATA) derived from a principal
    // and an SPL token mint address.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the ATA address for.
    // - `mint_account` (required): The SPL token mint address.
    //
    // Behavior:
    // - If `owner` is omitted, the ATA address is derived from the caller's principal and the provided mint.
    associated_token_account : (owner: opt principal, mint_account: Address) -> (Address);

    // Returns the balance (in lamports) of a Solana account at the given address.
    //
    // Parameters:
    // - `account` (optional): The address of the account to query.
    //
    // Behavior:
    // - If `account` is omitted, the account address is derived from the caller's principal.
    get_balance : (account: opt Address) -> (Lamport);

    // Returns the current blockhash stored in a Solana nonce account.
    //
    // Parameters:
    // - `account` (optional): The address of the nonce account to query.
    //
    // Behavior:
    // - If `account` is omitted, the nonce account address is derived from the caller's principal.
    get_nonce : (account: opt Address) -> (Blockhash);

    // Returns the token balance of an SPL associated token account (ATA).
    //
    // Parameters:
    // - `account` (optional): The address of the ATA to query.
    // - `mint_account` (required): The SPL token mint address.
    //
    // Behavior:
    // - If `account` is omitted, the ATA address is derived from the caller's principal and the provided mint.
    get_spl_token_balance : (account: opt Address, mint_account: Address) -> (TokenAmount);

    // Creates a Solana nonce account and returns its address.
    //
    // Parameters:
    // - `owner` (optional): The principal whose derived address will be the nonce authority.
    //
    // Behavior:
    // - If `owner` is omitted, the account address is derived from the caller's principal.
    create_nonce_account : (owner: opt principal) -> (Address);

    // Creates an SPL associated token account (ATA) for the given principal and mint, and returns its address.
    //
    // Parameters:
    // - `owner` (optional): The principal to create the ATA for.
    // - `mint_account` (required): The SPL token mint address.
    //
    // Behavior:
    // - If `owner` is omitted, the account address is derived from the caller's principal.
    create_associated_token_account : (owner: opt principal, mint_account: Address) -> (Address);

    // Sends SOL from the derived Solana address of a principal to a recipient Solana address.
    // The transaction is built using a recent Solana blockhash.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the sender address from.
    // - `to` (required): The recipient Solana address.
    // - `amount` (required): Amount of SOL to send, in lamports.
    //
    // Behavior:
    // - If `owner` is omitted, the caller's principal is used to derive the sender address.
    send_sol : (owner: opt principal, to: Address, amount: Lamport) -> (Txid);

    // Sends SOL from the derived Solana address of a principal to a recipient Solana address.
    // The transaction is built using the current blockhash of a Solana nonce account. Note that the
    // sender principal must already have a nonce account, see the `create_nonce_account` method.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the sender and nonce account addresses from.
    // - `to` (required): The recipient Solana address.
    // - `amount` (required): Amount of SOL to send, in lamports.
    //
    // Behavior:
    // - If `owner` is omitted, the caller's principal is used to derive the sender and nonce account addresses.
    send_sol_with_durable_nonce : (owner: opt principal, to: Address, amount: Lamport) -> (Txid);

    // Sends SPL tokens from the associated token account derived from a principal and mint address.
    // The ATAs for the sender and recipients must already exist. If not, create them with the
    // `create_associated_token_account` method.
    //
    // Parameters:
    // - `owner` (optional): The principal to derive the sender's ATA from.
    // - `mint_account` (required): The SPL token mint address.
    // - `to` (required): The recipient's Solana address (not its ATA, which will be automatically derived).
    // - `amount` (required): The number of tokens to send, in base units.
    //
    // Behavior:
    // - If `owner` is omitted, the caller's principal is used to derive the sender's ATA.
    send_spl_token : (owner: opt principal, mint_account: Address, to: Address, amount: nat) -> (Txid);
}
