type InitArg = record {
    // The canister will interact with this Solana network.
    solana_network : opt SolanaNetwork;
};

type SolanaNetwork = variant {
    // Live production environment.
    Mainnet;
    // Public testing and development.
    Devnet;
    // Validator and stress testing.
    Testnet;
};

type Ed25519KeyName = variant {
    // For local development with `dfx`
    TestKeyLocalDevelopment;
    // For testing with the Internet Computer's test key.
    TestKey1;
    // For running the canister in a production environment using the Internet Computer's production key.
    ProductionKey1;
};

// Atomic unit of SOL, i.e., 1 SOL = 10^9 Lamports
type Lamport = nat;

service : (opt InitArg) -> {
    // Returns the Solana account to which the owner should send Solana before sending
    // the amount to another account via the canister using the [send_sol] endpoint.
    //
    // If the owner is not set, it defaults to the caller's principal.
    solana_account : (owner: opt principal) -> (text);

    // Returns the lamport balance of the given Solana account.
    // If no address is provided, the address derived from the caller's principal is used.
    get_balance : (address: opt text) -> (Lamport);

    // Sends the given amount of SOL in base unit (Lamport) to the given Solana account.
    // Returns the transaction ID.
    send_sol : (to: text, amount: Lamport) -> (text);
}