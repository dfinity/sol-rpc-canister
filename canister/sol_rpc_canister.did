type SolanaCluster = variant {
  Mainnet;
  Devnet;
  Testnet;
};
type ProviderId = variant {
  AnkrMainnet;
  AlchemyDevnet;
  AlchemyMainnet;
  AnkrDevnet;
  PublicNodeMainnet;
};
type RpcProvider = record {
  cluster : SolanaCluster;
  access : RpcAccess;
};
type RpcConfig = record {
  responseSizeEstimate : opt nat64;
  responseConsensus : opt ConsensusStrategy;
};
type ConsensusStrategy = variant {
  Equality;
  Threshold : record {
    total : opt nat8;
    min : nat8;
  };
};
type RpcSource = variant {
  Provider : ProviderId;
  Custom : RpcApi;
};
type RpcSources = variant {
  Custom : vec RpcSource;
  Default : SolanaCluster;
};
type RpcAccess = variant {
  Authenticated : record {
    auth : RpcAuth;
    publicUrl : opt text;
  };
  Unauthenticated : record {
    publicUrl : text;
  };
};
type RpcAuth = variant {
  BearerToken : record { url : text };
  UrlParameter : record { urlPattern : text };
};
type RpcApi = record {
  url : text;
  headers : opt vec HttpHeader
};
type HttpHeader = record {
  value : text;
  name : text
};
type SolMainnetService = variant {
  Alchemy;
  Ankr;
  PublicNode;
};
type SolDevnetService = variant {
  Alchemy;
  Ankr;
};
type Regex = text;
type RegexSubstitution = record {
  pattern : Regex;
  replacement: text;
};
type OverrideProvider = record {
  overrideUrl : opt RegexSubstitution
};
type LogFilter = variant {
  ShowAll;
  HideAll;
  ShowPattern : Regex;
  HidePattern : Regex;
};
type InstallArgs = record {
  manageApiKeys: opt vec principal;
  overrideProvider: opt OverrideProvider;
  logFilter: opt LogFilter;
};
service : (InstallArgs,) -> {
  getProviders : () -> (vec record { ProviderId; RpcProvider }) query;
  updateApiKeys : (vec record { ProviderId; opt text }) -> ();
  // TODO XC-292: change signature
  getSlot : (RpcSources, opt RpcConfig) -> (nat64);
};