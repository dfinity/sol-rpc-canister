type Provider = record {
  providerId : ProviderId;
  cluster : SolanaCluster;
  access : RpcAccess;
  alias : opt RpcService;
};
type ProviderId = text;
type SolanaCluster = variant {
  Mainnet;
  Devnet;
  Testnet;
};
type RpcAccess = variant {
  Authenticated : record {
    auth : RpcAuth;
    publicUrl : opt text;
  };
  Unauthenticated : record {
    publicUrl : text;
  };
};
type RpcAuth = variant {
  BearerToken : record { url : text };
  UrlParameter : record { urlPattern : text };
};
type RpcService = variant {
  Provider : ProviderId;
  Custom : RpcApi;
  SolMainnet : SolMainnetService;
  SolDevnet : SolDevnetService;
};
type RpcApi = record {
  url : text;
  headers : opt vec HttpHeader
};
type RpcError = variant {
  JsonRpcError : JsonRpcError;
  ProviderError : ProviderError;
  ValidationError : ValidationError;
  HttpOutcallError : HttpOutcallError;
};
type HttpOutcallError = variant {
  IcError : record { code : RejectionCode; message : text };
  InvalidHttpJsonRpcResponse : record {
    status : nat16;
    body : text;
    parsingError : opt text;
  };
};
type JsonRpcError = record { code : int64; message : text };
type ProviderError = variant {
  TooFewCycles : record { expected : nat; received : nat };
  MissingRequiredProvider;
  ProviderNotFound;
  NoPermission;
  InvalidRpcConfig : text ;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type ValidationError = variant {
  Custom : text;
  InvalidHex : text;
};
type HttpHeader = record {
  value : text;
  name : text
};
type SolMainnetService = variant {
  Alchemy;
  Ankr;
  PublicNode;
};
type SolDevnetService = variant {
  Alchemy;
  Ankr;
};
type Regex = text;
type RegexSubstitution = record {
  pattern : Regex;
  replacement: text;
};
type OverrideProvider = record {
  overrideUrl : opt RegexSubstitution
};
type Mode = variant { Normal; Demo; };
type RequestResult = variant { Ok : text; Err : RpcError };
type InstallArgs = record {
  manageApiKeys: opt vec principal;
  overrideProvider: opt OverrideProvider;
  numSubnetNodes: opt nat32;
  mode: opt Mode;
};
service : (InstallArgs,) -> {
  getProviders : () -> (vec Provider) query;
  updateApiKeys : (vec record { ProviderId; opt text }) -> ();
  request : (RpcService, json : text, maxResponseBytes : nat64) -> (RequestResult);
};
