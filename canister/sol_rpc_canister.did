// Identifies a Solana cluster
type SolanaCluster = variant {
  // Live production environment
  Mainnet;
  // Public testing and development
  Devnet;
  // Validator and stress testing
  Testnet;
};

// Identifies an RPC provider for a particular Solana cluster.
type SupportedProvider = variant {
  AlchemyMainnet;
  AlchemyDevnet;
  AnkrMainnet;
  AnkrDevnet;
  DrpcMainnet;
  DrpcDevnet;
  HeliusMainnet;
  HeliusDevnet;
  PublicNodeMainnet;
};

// Defines an RPC provider for a particular Solana cluster and how to access it.
type RpcProvider = record {
  cluster : SolanaCluster;
  access : RpcAccess;
};

// Configures how to perform RPC HTTP calls.
type RpcConfig = record {
  responseSizeEstimate : opt nat64;
  responseConsensus : opt ConsensusStrategy;
};


// Rounding error for fetching the current slot from Solana using the JSON-RPC interface, meaning slots will be rounded
// down to the nearest multiple of this error when being fetched.
//
// Solana slot time (around 400ms) is faster than the latency of an HTTPs outcall (which involves every node in the
// subnet making an HTTP request), which is typically around a couple of seconds. It is therefore extremely likely that
// the nodes will receive different results and will fail to reach consensus.
//
// Rounding down the slot received by each node artificially increases the slot time observed by each node and therefore
// increases the probability of reaching consensus. In other words, the higher the rounding error, the more likely it is
// that consensus will be reached (which is required for the HTTPs outcall to be successful), but the older the
// resulting slot will be. Certain use cases, such as sending transactions, require a relatively recent block hash (less
// than 150 blocks old) so that too a large rounding error is not advisable.
//
// The default value of 20 has been experimentally shown to likely achieve consensus while still resulting in a slot
// whose corresponding block is "recent enough" to be used in a Solana transaction.
type RoundingError = nat64;

// Configures how to perform `getSlot` RPC HTTP calls.
type GetSlotRpcConfig = record {
  responseSizeEstimate : opt nat64;
  responseConsensus : opt ConsensusStrategy;
  roundingError : opt RoundingError;
};

// Defines a consensus strategy for combining responses from different providers.
type ConsensusStrategy = variant {
  Equality;
  Threshold : record {
    total : opt nat8;
    min : nat8;
  };
};

// Defines a Solana RPC source.
type RpcSource = variant {
  Supported : SupportedProvider;
  Custom : RpcEndpoint;
};

// Defines a collection of Solana RPC sources.
type RpcSources = variant {
  //  List explicitly which providers should be contacted.
  Custom : vec RpcSource;
  // Let the SOL RPC canister decide how many and which providers should be contacted for that cluster.
  // The exact number of contacted providers can be influenced by the chosen `ConsensusStrategy`.
  Default : SolanaCluster;
};

// Defines how to reach the supported RPC provider.
type RpcAccess = variant {
  Authenticated : record {
    auth : RpcAuth;
    publicUrl : opt text;
  };
  Unauthenticated : record {
    publicUrl : text;
  };
};

// Defines how a call to a supported provider is authenticated.
type RpcAuth = variant {
  BearerToken : record { url : text };
  UrlParameter : record { urlPattern : text };
};

// Specifies how to reach a Solana RPC provider
type RpcEndpoint = record {
  url : text;
  headers : opt vec HttpHeader
};

// An HTTP header.
type HttpHeader = record {
  value : text;
  name : text
};

// Represents an error that occurred while trying to perform an RPC call.
type RpcError = variant {
  JsonRpcError : JsonRpcError;
  ProviderError : ProviderError;
  ValidationError : text;
  HttpOutcallError : HttpOutcallError;
};

// Represents a JSON-RPC error.
type JsonRpcError = record { code : int64; message : text };

// Represents an error with an RPC provider.
type ProviderError = variant {
  TooFewCycles : record { expected : nat; received : nat };
  InvalidRpcConfig : text;
  UnsupportedCluster : text;
};

// Represents an HTTP outcall error.
type HttpOutcallError = variant {
  IcError : record { code: RejectionCode; message: text };
  InvalidHttpJsonRpcResponse : record {
    status : nat16;
    body : text;
    parsingError : opt text;
  };
};

// Represents an IC rejection code for an HTTP outcall.
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};

// Represents a Solana slot
type Slot = nat64;

// Represents the result of a call to the `getSlot` Solana RPC method.
type GetSlotResult = variant { Ok : Slot; Err : RpcError };

// Represents an aggregated result from multiple RPC calls to the `getSlot` Solana RPC method.
type MultiGetSlotResult = variant {
    Consistent : GetSlotResult;
    Inconsistent : vec record { RpcSource; GetSlotResult };
};

// Commitment levels in Solana, representing finality guarantees of transactions and state queries.
type CommitmentLevel = variant {
  processed;
  confirmed;
  finalized;
};

// The parameters for a call to the `getSlot` Solana RPC method.
type GetSlotParams = record {
  commitment: opt CommitmentLevel;
  minContextSlot: opt nat64;
};

// Represents the result of a generic RPC request.
type RequestResult = variant { Ok : text; Err : RpcError };

// Represents an aggregated result from multiple RPC calls for a generic RPC request.
type MultiRequestResult = variant {
    Consistent : RequestResult;
    Inconsistent : vec record { RpcSource; RequestResult };
};

// A string used as a regex pattern.
type Regex = text;

// A regex-based substitution with a pattern and replacement string.
type RegexSubstitution = record {
  pattern : Regex;
  replacement: text;
};

// Allows modifying an RpcEndpoint's request URL and HTTP headers.
type OverrideProvider = record {
  overrideUrl : opt RegexSubstitution
};

// A filter for log entries.
type LogFilter = variant {
  ShowAll;
  HideAll;
  ShowPattern : Regex;
  HidePattern : Regex;
};

// The number of nodes in the subnet
type NumSubnetNodes = nat32;

// The canister operation mode. Default is 'Normal'.
type Mode = variant {
    // Normal mode, where cycle payment is required for certain operations.
    Normal;
    // Demo mode, where cycle payment is not required.
    Demo;
};

// The installation args for the Solana RPC canister.
type InstallArgs = record {
  manageApiKeys: opt vec principal;
  overrideProvider: opt OverrideProvider;
  logFilter: opt LogFilter;
  numSubnetNodes : opt NumSubnetNodes;
  mode : opt Mode;
};

service : (InstallArgs,) -> {
  // Returns a list of all supported providers.
  getProviders : () -> (vec record { SupportedProvider; RpcProvider }) query;

  // Update the API keys for a list of supported providers.
  //
  // # Preconditions
  //
  // The caller is the controller or a principal specified in `InstallArgs::manage_api_keys`.
  updateApiKeys : (vec record { SupportedProvider; opt text }) -> ();

  // Call the Solana `getSlot` RPC method and return the resulting slot.
  getSlot : (RpcSources, opt GetSlotRpcConfig, opt GetSlotParams) -> (MultiGetSlotResult);

  // Make a generic RPC request that sends the given json_rpc_payload.
  request : (RpcSources, opt RpcConfig, json_rpc_paylod: text) -> (MultiRequestResult)
};
